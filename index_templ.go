// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.543
package markdown_stew

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

// this represents the whole index.html file
// it is a single page with a list of all the files passed as input,
// which are each rendered if theyre markdown into HTML
//
// this should be a SPA, so the user clicks on a file and it replaces
// the current page with that page's content
// the filename is converted into a slug, and whenever a user clicks on a file
// the slug is added to the URL hash
//
// on load, this should check the URL hash and if it is not empty, it should
// load the file with that slug
func Index(files []Template, title string, language string, darkMode bool, picoText string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(language))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if darkMode {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" data-theme=\"dark\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" data-theme=\"light\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><meta name=\"color-scheme\" content=\"light dark\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `index.templ`, Line: 25, Col: 15}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</title><style>\n\t\t\tpre{\n\t\t\t\t\twhite-space:pre-wrap;\n\t\t\t\t\twhite-space:-moz-pre-wrap;\n\t\t\t\t\twhite-space:-pre-wrap;\n\t\t\t\t\twhite-space:-o-pre-wrap;\n\t\t\t\t\tword-wrap:break-word\n\t\t\t}\n\t\t\t.hide {\n\t\t\t\tdisplay:none\n\t\t\t}\n\t\t\t.underline {\n\t\t\t\tborder-bottom:1px solid #e7e8eb\n\t\t\t}\n\t\t</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.Raw(picoText).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</head><body class=\"container\"><header><nav class=\"grid\"><ul><li><h1>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `index.templ`, Line: 47, Col: 20}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</h1></li></ul><ul style=\"justify-content: end\"><li><button id=\"theme-toggler\" onclick=\"toggleTheme()\" title=\"Toggle theme\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if darkMode {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("🌙")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("🔆")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</button></li></ul></nav></header><main><select id=\"file-select\" aria-label=\"Select a file\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, file := range files {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<option data-hash=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(file.Slug))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(file.Title)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `index.templ`, Line: 66, Col: 18}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</option>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</select><div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for index, file := range files {
			var templ_7745c5c3_Var5 = []any{"file", templ.KV("hide", index > 0)}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var5...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(file.Slug))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ.CSSClasses(templ_7745c5c3_Var5).String()))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><hr><div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(file.Rendered).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></main><footer></footer></body><script>\n\t\t\tfunction setHash(hash) {\n\t\t\t\thistory.pushState(null, null, \"#\" + hash);\n\t\t\t}\n\n\t\t\tfunction toggleTheme() {\n\t\t\t\tconst theme = document.documentElement.getAttribute(\"data-theme\");\n\t\t\t\tconst themeToggler = document.getElementById(\"theme-toggler\");\n\n\t\t\t\tif (theme === \"dark\") {\n\t\t\t\t\tdocument.documentElement.setAttribute(\"data-theme\", \"light\");\n\t\t\t\t\tthemeToggler.textContent = \"☀️\";\n\t\t\t\t} else {\n\t\t\t\t\tdocument.documentElement.setAttribute(\"data-theme\", \"dark\");\n\t\t\t\t\tthemeToggler.textContent = \"🌙\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction updatePage() {\n\t\t\t\tconst hash = window.location.hash;\n\t\t\t\tif (!hash) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconsole.log(`updating page to show hash: ${hash}`);\n\t\t\t\tconst showFile = document.getElementById(hash.slice(1));\n\t\t\t\tif (!showFile) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst showFileId = showFile.id;\n\t\t\t\tdocument.querySelectorAll(\".file\").forEach(function (file) {\n\t\t\t\t\tif (file.id !== showFileId) {\n\t\t\t\t\t\tfile.classList.add(\"hide\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfile.classList.remove(\"hide\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst fileSelect = document.getElementById(\"file-select\");\n\t\t\tfileSelect.addEventListener(\"change\", () => {\n\t\t\t\tconst hash =\n\t\t\t\t\tfileSelect.options[fileSelect.selectedIndex].getAttribute(\"data-hash\");\n\t\t\t\tsetHash(hash);\n\t\t\t\tupdatePage();\n\t\t\t});\n\n\t\t\twindow.addEventListener(\"popstate\", updatePage);\n\t\t\twindow.addEventListener(\"hashchange\", updatePage);\n\t\t\twindow.addEventListener(\"DOMContentLoaded\", updatePage);\n\t\t</script></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
